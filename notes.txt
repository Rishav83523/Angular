Angular is browser side framework not node js side framework

but Angular cli requires node js

npm install -g @angular/cli

cli makes ng command available

ng new project name

main.ts will be the first file to be executed when the app loads

main.ts gets automatically injected in index.html by angular

bootstrape application requires a component and this tries to look for that app component in index.html

@Component({}) is a decorator it attaches a metadata to certain things

this decorator turns that class into a angular component

selector tells angular which compoenet to look for replace for with its markup


angular is not automaticaly scanning files to look for compnents so you need to say about its compoenets

those components part of same tree will be able to work together and exchange data and communicate with each other

to make angular know about your component you go inside app.component.html and use the selector of that compoenet as custom html tag and then
also you need to import in it ts file and also mention in imports because as said earlier angular doesnt automatically scans file

to make the image load make sure if we have src/assets in assets in angular.json


ng generate component user
ng g c user pathToCreateFile

dynamic contents can be done in 2 ways
1st way = is by using string interploation

Ex = <div>
  <button>
    <img src="" alt="" />
    <span>{{selectedUser.name}}</span>
  </button>
</div>
we dont use string interploation for attributes

property binding syntax
you wrap the property or dom element which you want to set with square brackets []

<div>
  <button>
    <img [src]="'assets/users/' + selectedUser.avatar" alt="" />
    <span>{{ selectedUser.name }}</span>
  </button>
</div>


<div
  role="progressbar"
  [attr.aria-valuenow]="currentVal"
  [attr.aria-valuemax]="maxVal">...</div>

By adding attr in front of the attribute name you want to bind dynamically, you're "telling" Angular that it shouldn't try to find a property with the specified name but instead bind the respective attribute - in the example above, the aria-valuenow and aria-valuemax attributes would be bound dynamically.


to add event listener to an element in angular you go to that element and you do something like this

<button (click)>  we mention the event we want to add and add paranthesis aroundit

<div>
  <button (click)="onSelectUser()">
    <img [src]="imagePath" [alt]="selectedUser.name" />
    <span>{{ selectedUser.name }}</span>
  </button>
</div>

we defined onSelectUSer in its tempalte class



ctrl + space opens up ide suggestions

angular uses zone.js it automaticaaly listens to all possible events when such events occurs it checks for change detection and updates the dom snapshots

two approaches for updating state one is using zone.js

2nd method is signal which are end are special kind of values which tell angular when they change

signal is like a container which contains some intial value

and when that value is changed angular is notified about that change and then angualar can update the changes wherever that value(basically signal value) is being used


export class UserComponent {
  //this is a public property
  selectedUser = signal(DUMMY_USERS[randomIndex]);

  get imagePath() {
    return 'assets/users/' + this.selectedUser.avatar;
  }

  onSelectUser() {
    // alert('User selected!');
    this.selectedUser.set(
      DUMMY_USERS[Math.floor(Math.random() * DUMMY_USERS.length)]
    );
  }
}


whenever we are using property that uses signal now we have to execute the property so that it can read the change
<div>
  <button (click)="onSelectUser()">
    <img [src]="imagePath" [alt]="selectedUser().name" />
    <span>{{ selectedUser().name }}</span>
  </button>
</div>

<!-- imagePath is used as a property we dont executeit  -->


ng g c --skip-tests

*ngFor="let user of users"

these are structral directives which bring changes to the structre

*ngIf="selectedUser"  we put this structral directritive in the element

for else case you need a special element ng template then give identifier to it and then call it in if with else with that identifier

Components are directives with template
directives are template without directives

ngFor ngIf ngModel are directives ,they are simply angular powered enhancements

 [(ngModel)] it sets up 2 way binding for ngModel, it cannot be set up for all only to few but you can make it set for your own components



you can also use signal for listening and 2 way binding
 enteredTitle = signal(''); rest everything is same dont execute it in html template


by default form in html will try to bundle the data and send it to server handling the request

but it will be prevented if you import forms module

formsModeile give ngSubmit event which occues when form submit haapens and browser deafult was prevented


date: 'short' pipes formatting for date


dependecny injection is suppose you need an instance but you dont create that instance yourself you say angular you need that instance and you let the angular create it

//Angular Modules

it is declaration array where we declare all the array thats needs to work together.

we can use standalone compoenet in module and also we can use module in standalone compoenet like form Modules in new Task Component


Browser module is meant to be imported just in the root component

for all other modules we use common modules

